Sun Oct 29 21:30:44 PDT 2023
Linux csslab15 4.18.0-477.21.1.el8_8.x86_64 #1 SMP Tue Aug 8 21:30:09 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux
uid=1150088(lylas3) gid=2121150088(lylas3) groups=2121150088(lylas3),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
testGraph0NotDirected
testGraph1
Done!
=====================================================
3. clang-tidy warnings are fixed
=====================================================
11147 warnings generated.
33857 warnings generated.
52720 warnings generated.
64091 warnings generated.
77640 warnings generated.
Suppressed 77640 warnings (77640 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./edge.cpp
2,5c2,6
< // In a graph data structure, edges connect vertices (nodes) and typically have associated weights.
< // This class defines the properties and behavior of an edge, including its starting point,
< // ending point, weight, and whether it is directed or undirected.
< // Directed edges have a specific direction, while undirected edges do not.
---
> // In a graph data structure, edges connect vertices (nodes) and typically have
> // associated weights. This class defines the properties and behavior of an
> // edge, including its starting point, ending point, weight, and whether it is
> // directed or undirected. Directed edges have a specific direction, while
> // undirected edges do not.
20c21,22
< // Parametrized constructor for Edge that takes starting point, ending point, weight, and direction
---
> // Parametrized constructor for Edge that takes starting point, ending point,
> // weight, and direction
25c27
<   this->isDirected = isDirected; 
---
>   this->isDirected = isDirected;
27,28d28
< 
< 
Running clang-format on ./graph.cpp
41,44c41,45
<   return accumulate(graph.begin(), graph.end(), 0,
<                     [](int sumAllTogether, const pair<const string, Vertex*>& pair) {
<                       return sumAllTogether + pair.second->vectorOfEdges.size();
<                     });
---
>   return accumulate(
>       graph.begin(), graph.end(), 0,
>       [](int sumAllTogether, const pair<const string, Vertex *> &pair) {
>         return sumAllTogether + pair.second->vectorOfEdges.size();
>       });
118c119
<   auto* edgeAdded =
---
>   auto *edgeAdded =
120c121
<   startVertexIt->second->  addingEdge(edgeAdded);
---
>   startVertexIt->second->addingEdge(edgeAdded);
127c128
<     endVertexIt->second->  addingEdge(
---
>     endVertexIt->second->addingEdge(
Running clang-format on ./graphtest.cpp
Running clang-format on ./main.cpp
Running clang-format on ./vertex.cpp
2c2
< #include <algorithm> 
---
> #include <algorithm>
8c8
< // Destructor 
---
> // Destructor
14,17c14,18
<   auto edgeFound = find_if(vectorOfEdges.begin(), vectorOfEdges.end(),
<     [this, findingEdge](const Edge* edge) {
<       return edge->sPoint == this && edge->ePoint == findingEdge;
<     });
---
>   auto edgeFound =
>       find_if(vectorOfEdges.begin(), vectorOfEdges.end(),
>               [this, findingEdge](const Edge *edge) {
>                 return edge->sPoint == this && edge->ePoint == findingEdge;
>               });
30d30
< 
35,39c35,39
<   auto insertPosition = lower_bound(
<     vectorOfEdges.begin(), vectorOfEdges.end(), addingToEdge,
<     [](const Edge *edge1, const Edge *edge2) {
<       return edge1->ePoint->vertexID < edge2->ePoint->vertexID;
<     });
---
>   auto insertPosition =
>       lower_bound(vectorOfEdges.begin(), vectorOfEdges.end(), addingToEdge,
>                   [](const Edge *edge1, const Edge *edge2) {
>                     return edge1->ePoint->vertexID < edge2->ePoint->vertexID;
>                   });
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==2874749== Memcheck, a memory error detector
==2874749== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2874749== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==2874749== Command: ./a.out
==2874749== Parent PID: 2874625
==2874749== 
==2874749== 
==2874749== HEAP SUMMARY:
==2874749==     in use at exit: 2,360 bytes in 71 blocks
==2874749==   total heap usage: 323 allocs, 252 frees, 143,833 bytes allocated
==2874749== 
==2874749== LEAK SUMMARY:
==2874749==    definitely lost: 504 bytes in 9 blocks
==2874749==    indirectly lost: 1,856 bytes in 62 blocks
==2874749==      possibly lost: 0 bytes in 0 blocks
==2874749==    still reachable: 0 bytes in 0 blocks
==2874749==         suppressed: 0 bytes in 0 blocks
==2874749== Rerun with --leak-check=full to see details of leaked memory
==2874749== 
==2874749== For lists of detected and suppressed errors, rerun with: -s
==2874749== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Sun Oct 29 21:31:02 PDT 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
